// If you finish this kata, you can try Insane Coloured Triangles by Bubbler, which is a much harder version of this one.

// A coloured triangle is created from a row of colours, each of which is red, green or blue. 
// Successive rows, each containing one fewer colour than the last, are generated by considering 
// the two touching colours in the previous row. If these colours are identical, the same colour is used in the new row. 
// If they are different, the missing colour is used in the new row. 
// This is continued until the final row, with only a single colour, is generated.

// The different possibilities are:

// Colour here:        G G        B G        R G        B R
// Becomes colour:      G          R          B          G
// With a bigger example:

// R R G B R G B B
//  R B R G B R B
//   G G B R G G
//    G R G B G
//     B B R R
//      B G R
//       R B
//        G

// You will be given the first row of the triangle as a string and its your job to return 
// the final colour which would appear in the bottom row as a string. In the case of the example above, 
// you would the given RRGBRGBB you should return G.

// The input string will only contain the uppercase letters R, G, B and there will be at least one letter 
// so you do not have to test for invalid input.
// If you are only given one colour as the input, return that colour.


// First attempt: this times out:

// function triangle(row) {
//     const colorValues = ['G', 'R', 'B'];
//     let tempArray = [];
//     let ans = row.split('')
//     while (ans.length > 1){
//         for (let i = 0; i < ans.length; i++){
//             if(ans[i] === ans[i+1]){
//                 tempArray.push(ans[i]);
//             }else{
//                 tempArray.push(colorValues.filter(e => [ans[i], ans[i+1]].indexOf(e) < 0).join(''))
//                 console.log(tempArray)
//             }
//         }
//         ans = [...tempArray];
//         tempArray = [];
//     }

//     return ans.join('');
// }

triangle('GB');

function triangle(row) {
    console.log(row)
    const colorValues = ['G', 'R', 'B'];
    let tempArray = [];
    let ans = row.split('')
    while (ans.length > 1){
        console.log('Do a thing')
        tempArray = ans.reduce((accumulator, element, index, arr) => {
            if (element === arr[index + 1]){
                return [...accumulator, element];
            }else{
                return [...accumulator, ...colorValues.filter(e => [element, arr[index + 1]].indexOf(e) < 0)]
            }
            console.log(accumulator)
        }, [])
        ans = [...tempArray];
        tempArray = [];
    }

    return ans.join('');
}

triangle('GB')